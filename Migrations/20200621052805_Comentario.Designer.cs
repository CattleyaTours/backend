// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

namespace backend.Migrations
{
    [DbContext(typeof(CattleyaToursContext))]
    [Migration("20200621052805_Comentario")]
    partial class Comentario
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Actividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int");

                    b.Property<int>("TipoActividadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionId");

                    b.HasIndex("TipoActividadId");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("Archivo_SitioTuristico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SitioId")
                        .HasColumnType("int");

                    b.Property<string>("ext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("info_file")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("SitioId");

                    b.ToTable("Archivos_SitioTuristico");
                });

            modelBuilder.Entity("CategoriaActividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(800)");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CategoriasActividad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Participa en actividades como creación de artesanías, taller de fotografía entre otras.",
                            Icono = "fas fa-pencil-ruler",
                            Nombre = "Talleres"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Prueba las delicias típicas de nuestra tierra, en sitios únicos y vive una experiencia inolvidable.",
                            Icono = "fas fa-utensils",
                            Nombre = "Gastronomía"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Recorre los parques y reservas naturales más famosas de nuestro país en compañía de expertos.",
                            Icono = "fas fa-map-marked-alt",
                            Nombre = "Visitas guiadas"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Visita sitios únicos en el mundo como cascadas naturales, volcanes y nevados.",
                            Icono = "fas fa-hiking",
                            Nombre = "Maravillas naturales"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Experimenta el vértigo y la adrenalina practicando deportes extremos como rapel, parapente, paracaidismo, canotaje, ciclomontañismo, entre otros.",
                            Icono = "fas fa-biking",
                            Nombre = "Deportes extremos"
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Disfruta de atracciones mecánicas en los parques de diversiones más famosos del país.",
                            Icono = "fas fa-rocket",
                            Nombre = "Atracciones mecánicas"
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Sal de la ciudad y pasa un fin de semana alejado del estrés acampando en sitios extraordinarios disfrutando de la naturaleza en su máximo esplendor.",
                            Icono = "fas fa-campground",
                            Nombre = "Glamping"
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Vive una noche inolvidable junto a tus amigos disfrutando la sorprendente vida nocturna que tenemos para ofrecerte.",
                            Icono = "fas fa-glass-cheers",
                            Nombre = "Rumba"
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Disfruta la experiencia de alimentar y convivir con animales de la región, acompañado por los mejores guías.",
                            Icono = "fas fa-paw",
                            Nombre = "Experiencias con animales"
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "Realiza actividades originales y divertidas únicas de cada sitio.",
                            Icono = "fas fa-ellipsis-h",
                            Nombre = "Otros"
                        });
                });

            modelBuilder.Entity("Comentario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.HasKey("UsuarioId", "PublicacionId");

                    b.HasIndex("PublicacionId");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("EstadoReserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EstadosReserva");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "En espera"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Aceptado"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Rechazado"
                        });
                });

            modelBuilder.Entity("Interes", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "PublicacionId");

                    b.HasIndex("PublicacionId");

                    b.ToTable("Interes");
                });

            modelBuilder.Entity("Publicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(800)");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.Property<int>("PropietarioId")
                        .HasColumnType("int");

                    b.Property<int>("SitioId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PropietarioId");

                    b.HasIndex("SitioId");

                    b.ToTable("Publicaciones");
                });

            modelBuilder.Entity("Reserva", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoReservaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "PublicacionId");

                    b.HasIndex("EstadoReservaId");

                    b.HasIndex("PublicacionId");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Propietario"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Usuario"
                        });
                });

            modelBuilder.Entity("SitioTuristico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(800)");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PropietarioId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PropietarioId");

                    b.ToTable("SitiosTuristicos");
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Actividad", b =>
                {
                    b.HasOne("Publicacion", null)
                        .WithMany("Actividades")
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CategoriaActividad", "TipoActividad")
                        .WithMany()
                        .HasForeignKey("TipoActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Archivo_SitioTuristico", b =>
                {
                    b.HasOne("SitioTuristico", "Sitio")
                        .WithMany("Imagenes")
                        .HasForeignKey("SitioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Comentario", b =>
                {
                    b.HasOne("Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Interes", b =>
                {
                    b.HasOne("Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicacion", b =>
                {
                    b.HasOne("Usuario", "Propietario")
                        .WithMany()
                        .HasForeignKey("PropietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SitioTuristico", "Sitio")
                        .WithMany()
                        .HasForeignKey("SitioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reserva", b =>
                {
                    b.HasOne("EstadoReserva", "EstadoReserva")
                        .WithMany()
                        .HasForeignKey("EstadoReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SitioTuristico", b =>
                {
                    b.HasOne("Usuario", "Propietario")
                        .WithMany()
                        .HasForeignKey("PropietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.HasOne("Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
